---
- name: Include os specific variables
  ansible.builtin.include_vars: "{{ loop_vars }}"
  loop: "{{ query('ansible.builtin.first_found', params) }}"
  vars:
    params:
      files:
        - "{{ ansible_distro | lower }}-{{ ansible_distro_version }}.yml"
        - "{{ ansible_distro | lower }}-{{ ansible_distro_release }}.yml"
        - "{{ ansible_distro | lower }}-{{ ansible_distro_major_version }}.yml"
        - "{{ ansible_distro | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distro_major_version }}-family.yml"
        - "{{ ansible_os_family | lower }}-family.yml"
        - "{{ ansible_system | lower }}.yml"
      paths:
        - "vars"
      skip: true
  loop_control:
    loop_var: loop_vars

- name: Ensure patroni_group_name is defined
  ansible.builtin.assert:
    that:
      - patroni_group_name | d('') | length > 0
      - patroni_group_name in groups
    fail_msg: THE VARIABLE patroni_group_name IS NOT DEFINED. PUT ALL THE PATRONI NODES WITHIN AN ANSIBLE HOSTGROUP

- name: Ensure patroni_dnsmasq_upstream_servers is not empty if using dnsmasq
  when: patroni_setup_dnsmasq | bool
  ansible.builtin.assert:
    that: patroni_dnsmasq_upstream_servers | d([]) | length > 0
    fail_msg: THE VARIABLE patroni_dnsmasq_upstream_servers CONTAINS NO DNS SERVERS. PUT ALL THE UPSTREAM DNS SERVERS AS A LIST WITHIN AN said variable

- name: "Build proxy environnement to enable/disable proxy use for general internet usage and package manager actions"
  ansible.builtin.set_fact:
    _patroni_general_proxy_env:
      http_proxy: "{{ patroni_http_general_proxy | d(omit, true) }}"
      https_proxy: "{{ patroni_https_general_proxy | d(omit, true) }}"
    _patroni_pkg_proxy_env:
      http_proxy: "{{ patroni_http_pkg_proxy | d(omit, true) }}"
      https_proxy: "{{ patroni_https_pkg_proxy | d(omit, true) }}"
